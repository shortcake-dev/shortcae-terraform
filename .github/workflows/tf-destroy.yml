name: tf-destroy

on:
  workflow_call:
    inputs:
      release_type:
        type: string
        required: true
      release_name:
        type: string
        default: "release"
        required: false
      backend_version:
        type: string
        default: "latest"
        required: false
    secrets:
      terraform_team_token:
        required: true
      google_cloud_plan_token:
        required: true
      google_cloud_deploy_token:
        required: true

# TODO: Currently unsupported by GitHub Actions
#concurrency: ${{ inputs.release_type }}-${{ inputs.release_name }}

env:
  TF_IN_AUTOMATION: true
  TF_ORGANIZATION_NAME: "shortcake"
  TF_PLUGIN_CACHE_DIR: ${{ github.workspace }}/.terraform.d/plugin-cache
  TF_WORKSPACE_PREFIX: "shortcake"
  TF_VERSION: 1.0.1

jobs:
  tf-workspace-exists:
    name: "Check if workspace exists"
    runs-on: ubuntu-latest
    outputs:
      workspace-name: ${{ steps.workspace-name.outputs.workspace-name }}
      workspace-exists: ${{ steps.workspace-exists.outputs.workspace-exists }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Get workspace name"
        id: workspace-name
        shell: python
        run: |
          workspace_name = "${{ inputs.release_type }}-${{ inputs.release_name }}"

          print(f"Workspace name: {workspace_name}")
          print(f"::set-output name=workspace-name::{workspace_name}")

      - name: "Set up Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.terraform_team_token }}

      - name: "Create plugin cache dir"
        run: mkdir -p ${{ env.TF_PLUGIN_CACHE_DIR }}

      - name: "Restore Terraform plugin cache"
        uses: actions/cache@v2
        with:
          path: ${{ env.TF_PLUGIN_CACHE_DIR }}
          key: terraform-providers-${{ hashFiles('.terraform.lock.hcl') }}
          restore-keys: |
            terraform-providers-

        # This needs to be done before selecting/creating workspace
      - name: "Terraform init"
        # This throws an error about unsupported workspaces for some reason
        continue-on-error: true
        run: terraform init --input=false

      - name: "Check if workspace exists"
        id: workspace-exists
        run: |
          if terraform workspace select ${WORKSPACE_NAME} ; then
              WORKSPACE_EXISTS=true
          else
              WORKSPACE_EXISTS=false
          fi

          echo "Workspace ${WORKSPACE_NAME} exists: ${WORKSPACE_EXISTS}"
          echo "::set-output name=workspace-exists::${WORKSPACE_EXISTS}"
        env:
          WORKSPACE_NAME: ${{ steps.workspace-name.outputs.workspace-name }}

  tf-destroy-plan:
    name: "Plan workspace destroy"
    runs-on: ubuntu-latest
    environment: tf-${{ inputs.release_type }}
    needs: [ tf-workspace-exists ]
    if: ${{ needs.tf-workspace-exists.outputs.workspace-exists == 'true' }}
    outputs:
      resources-to-destroy: ${{ steps.resources-to-destroy.outputs.resources-to-destroy }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Set up Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.terraform_team_token }}

      - name: "Create plugin cache dir"
        run: mkdir -p ${{ env.TF_PLUGIN_CACHE_DIR }}

      - name: "Restore Terraform plugin cache"
        uses: actions/cache@v2
        with:
          path: ${{ env.TF_PLUGIN_CACHE_DIR }}
          key: terraform-providers-${{ hashFiles('.terraform.lock.hcl') }}
          restore-keys: |
            terraform-providers-

      - name: "Terraform init"
        run: terraform init --input=false
        env:
          # https://support.hashicorp.com/hc/en-us/articles/360043550953
          TF_WORKSPACE: ${{ needs.tf-workspace-exists.outputs.workspace-name }}

      - name: "Activate workspace"
        run: terraform workspace select ${{ needs.tf-workspace-exists.outputs.workspace-name }}

      - name: "Terraform plan"
        id: destroy-plan
        # https://github.com/hashicorp/terraform/issues/29130
        continue-on-error: true
        run: terraform plan --destroy --input=false --out=tfplan --detailed-exitcode
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.google_cloud_plan_token }}
          TF_VAR_backend_version: ${{ inputs.backend_version }}
          TF_VAR_deployment_name: ${{ inputs.release_name }}
          TF_VAR_release_type: ${{ inputs.release_type }}

      - name: "Check for changes in Terraform plan"
        id: resources-to-destroy
        shell: python
        run: |
          import sys

          exit_code = ${{ steps.destroy-plan.outputs.exitcode }}
          print(f"Exit code = {exit_code}")

          if exit_code == 0:
              plan_has_changes = "false"
          elif exit_code == 2:
              plan_has_changes = "true"
          else:
              sys.exit(exit_code)

          print(f"Plan has changes: {plan_has_changes}")
          print(f"::set-output name=resources-to-destroy::{plan_has_changes}")

      - name: "Upload tfplan for use in deploy job"
        uses: actions/upload-artifact@v2
        with:
          name: tfplan
          path: tfplan

  tf-destroy:
    name: "Destroy workspace"
    runs-on: ubuntu-latest
    environment: tf-${{ inputs.release_type }}
    needs: [ tf-workspace-exists, tf-destroy-plan ]
    steps:
      # We need this job to always run (i.e. we can't use a job-level if statement) so
      # that tf-delete can depend on it. I would like to abort from the job early, but
      # there appears to be no way of doing this. I had to settle for adding if
      # statements to all subsequent steps, which is kinda ugly.
      - name: "Indicate destruction necessity"
        shell: python
        run: |
          resources_to_destroy = "${{ needs.tf-destroy-plan.outputs.resources-to-destroy }}"

          if resources_to_destroy == "true":
              print("Resources to destroy. Continuing with destruction.")
          else:
              print("No resources to destroy. All subsequent steps will be skipped")

      - name: "Checkout"
        # See note above on tf-delete job on why all these if statements are here
        if: ${{ needs.tf-destroy-plan.outputs.resources-to-destroy == 'true' }}
        uses: actions/checkout@v2

      - name: "Set up Terraform"
        if: ${{ needs.tf-destroy-plan.outputs.resources-to-destroy == 'true' }}
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.terraform_team_token }}

      - name: "Restore Terraform plugin cache"
        if: ${{ needs.tf-destroy-plan.outputs.resources-to-destroy == 'true' }}
        uses: actions/cache@v2
        with:
          path: ${{ env.TF_PLUGIN_CACHE_DIR }}
          key: terraform-providers-${{ hashFiles('.terraform.lock.hcl') }}
          restore-keys: |
            terraform-providers-

      - name: "Terraform init"
        if: ${{ needs.tf-destroy-plan.outputs.resources-to-destroy == 'true' }}
        run: terraform init --input=false
        env:
          # https://support.hashicorp.com/hc/en-us/articles/360043550953
          TF_WORKSPACE: ${{ needs.tf-workspace-exists.outputs.workspace-name }}

      - name: "Activate workspace"
        if: ${{ needs.tf-destroy-plan.outputs.resources-to-destroy == 'true' }}
        run: terraform workspace select ${{ needs.tf-workspace-exists.outputs.workspace-name }}

      - name: "Download tfplan from plan job"
        if: ${{ needs.tf-destroy-plan.outputs.resources-to-destroy == 'true' }}
        uses: actions/download-artifact@v2
        with:
          name: tfplan

      - name: "Terraform destroy"
        if: ${{ needs.tf-destroy-plan.outputs.resources-to-destroy == 'true' }}
        run: terraform apply --input=false tfplan
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.google_cloud_deploy_token }}

  tf-delete:
    name: "Delete workspace"
    runs-on: ubuntu-latest
    environment: tf-${{ inputs.release_type }}
    needs: [ tf-workspace-exists, tf-destroy ]
    if: ${{ needs.tf-workspace-exists.outputs.workspace-exists == 'true' }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Set up Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.terraform_team_token }}

      - name: "Restore Terraform plugin cache"
        uses: actions/cache@v2
        with:
          path: ${{ env.TF_PLUGIN_CACHE_DIR }}
          key: terraform-providers-${{ hashFiles('.terraform.lock.hcl') }}
          restore-keys: |
            terraform-providers-

      - name: "Terraform init"
        run: terraform init --input=false
        env:
          # https://support.hashicorp.com/hc/en-us/articles/360043550953
          TF_WORKSPACE: ${{ needs.tf-workspace-exists.outputs.workspace-name }}

      - name: "Delete workspace"
        run: terraform workspace delete ${{ needs.tf-workspace-exists.outputs.workspace-name }}
