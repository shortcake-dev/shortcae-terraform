name: deploy

on:
  # During debug
  pull_request:
  push:
    branches: [ main ]

env:
  TF_PLUGIN_CACHE_DIR: ${{ github.workspace }}/.terraform.d/plugin-cache
  TF_IN_AUTOMATION: true

jobs:
  prod-plan:
    runs-on: ubuntu-latest
    environment: prod-plan
    outputs:
      plan-has-changes: ${{ steps.plan.outputs.plan-has-changes }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Set up Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.1
          cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_TEAM_TOKEN }}

      - name: "Restore Terraform plugin cache"
        uses: actions/cache@v2
        with:
          path: ${{ env.TF_PLUGIN_CACHE_DIR }}
          key: terraform-providers-${{ hashFiles('.terraform.lock.hcl') }}
          restore-keys: |
            terraform-providers-

      - name: "terraform init"
        run: terraform init --input=false
        env:
          # https://support.hashicorp.com/hc/en-us/articles/360043550953
          TF_WORKSPACE: "prod"

      - name: "Activate workspace"
        run: terraform workspace select prod

      - name: "Check for changes in Terraform plan"
        id: plan
        shell: python
        run: |
          import subprocess
          import sys

          command = ["terraform", "plan", "--input=false", "--detailed-exitcode"]
          result = subprocess.run(command, check=False, capture_output=True)

          exit_code = result.returncode
          print(f"Exit code: {exit_code}")

          print(result.stdout[::-1])
          print("%%%%%%%%%%%%%%%%%%%%%")
          print(result.stderr[::-1])

          if exit_code == 0:
              plan_has_changes = False
          elif exit_code == 2:
              plan_has_changes = True
          else:
              sys.exit(exit_code)

          print(f"::set-output name=plan-has-changes::{plan_has_changes}")
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_PROD_PLAN_SA_KEY_JSON }}

#      - name: "Check for changes in Terraform plan"
#        id: plan
#        run: |
#           terraform plan --input=false --detailed-exitcode \
#               && EXIT_CODE=$? \
#               || EXIT_CODE=$?
#
#          echo "EXIT_CODE=${EXIT_CODE}"
#
#          case "${EXIT_CODE}" in
#              0) PLAN_HAS_CHANGES="false" ;;
#              2) PLAN_HAS_CHANGES="true" ;;
#              *) exit ${EXIT_CODE} ;;
#          esac
#
#          # Create output
#          echo "::set-output name=plan-has-changes::${PLAN_HAS_CHANGES}"
#        env:
#          GOOGLE_CREDENTIALS: ${{ secrets.GCP_PROD_PLAN_SA_KEY_JSON }}

  prod-approve:
    environment: prod-approve
    runs-on: ubuntu-latest
    needs: [ prod-plan ]
    if: ${{ needs.prod-plan.outputs.plan-has-changes == 'true' }}
    steps:
      - name: "NOP"
        run: /bin/true

#  prod-deploy:
#    runs-on: ubuntu-latest
#    environment: prod
#    steps:
#      - name: "Checkout"
#        uses: actions/checkout@v2
#
#      - name: "Set up Terraform"
#        uses: hashicorp/setup-terraform@v1
#        with:
#          terraform_version: 1.0.1
#          cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_TEAM_TOKEN }}
#
#      - name: "Restore Terraform plugin cache"
#        uses: actions/cache@v2
#        with:
#          path: ${{ env.TF_PLUGIN_CACHE_DIR }}
#          key: terraform-providers-${{ hashFiles('.terraform.lock.hcl') }}
#          restore-keys: |
#            terraform-providers-
#
#      - name: "terraform init"
#        run: terraform init --input=false
#        env:
#          # https://support.hashicorp.com/hc/en-us/articles/360043550953
#          TF_WORKSPACE: "prod"
#
#      - name: "Activate workspace"
#        run: terraform workspace select prod
#
#      - name: "Download tfplan from plan job"
#        uses: actions/download-artifact@v2
#        with:
#          name: tfplan-prod
#
#      - name: "terraform apply"
#        run: terraform apply tfplan --input=false
#        env:
#          GOOGLE_CREDENTIALS: ${{ secrets.GCP_PROD_SA_KEY }}
