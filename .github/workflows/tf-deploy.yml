on:
  workflow_call:
    inputs:
      release_type:
        type: string
        required: true
      release_name:
        type: string
        default: "release"
        required: false

# TODO: Currently unsupported by GitHub Actions
#concurrency: ${{ inputs.release_type }}-${{ inputs.release_name }}

env:
  TF_IN_AUTOMATION: true
  TF_ORGANIZATION_NAME: "shortcake"
  TF_PLUGIN_CACHE_DIR: ${{ github.workspace }}/.terraform.d/plugin-cache
  TF_WORKSPACE_PREFIX: "shortcake"
  TF_VERSION: 1.0.1

jobs:
  tf-workspace:
    name: "Create workspace"
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.draft == false }}
    outputs:
      workspace-name: ${{ steps.workspace-name.outputs.workspace-name }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Get workspace name"
        id: workspace-name
        shell: python
        run: |
          workspace_name = "${{ inputs.release_type }}-${{ inputs.release_name }}"

          print(f"Workspace name: {workspace_name}")
          print(f"::set-output name=workspace-name::{workspace_name}")

      - name: "Set up Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_TEAM_TOKEN }}

      - name: "Create plugin cache dir"
        run: mkdir -p ${{ env.TF_PLUGIN_CACHE_DIR }}

      - name: "Restore Terraform plugin cache"
        uses: actions/cache@v2
        with:
          path: ${{ env.TF_PLUGIN_CACHE_DIR }}
          key: terraform-providers-${{ hashFiles('.terraform.lock.hcl') }}
          restore-keys: |
            terraform-providers-

        # This needs to be done before selecting/creating workspace
      - name: "Terraform init"
        # This throws an error about unsupported workspaces for some reason
        continue-on-error: true
        run: terraform init --input=false

      - name: "Create workspace if it doesn't already exist"
        run: >
          terraform workspace select ${{ steps.workspace-name.outputs.workspace-name }}
          || terraform workspace new ${{ steps.workspace-name.outputs.workspace-name }}

      - name: "Make sure workspace is set to local execution mode"
        run: |
          curl \
            --header "Authorization: Bearer ${{ secrets.TERRAFORM_CLOUD_ORG_TOKEN }}" \
            --header "Content-Type: application/vnd.api+json" \
            --request PATCH \
            --data '{"data": {"type": "workspaces", "attributes": {"execution-mode": "local"}}}' \
            --fail \
            https://app.terraform.io/api/v2/organizations/${ORGANIZATION_NAME}/workspaces/${WORKSPACE_NAME}
        env:
          ORGANIZATION_NAME: ${{ env.TF_ORGANIZATION_NAME }}
          WORKSPACE_NAME: "${{ env.TF_WORKSPACE_PREFIX }}-${{ steps.workspace-name.outputs.workspace-name }}"

  tf-plan:
    name: "Terraform plan"
    runs-on: ubuntu-latest
    environment: tf-${{ inputs.release_type }}
    needs: [ tf-workspace ]
    outputs:
      plan-has-changes: ${{ steps.plan-has-changes.outputs.plan-has-changes }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Set up Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_TEAM_TOKEN }}

      - name: "Create plugin cache dir"
        run: mkdir -p ${{ env.TF_PLUGIN_CACHE_DIR }}

      - name: "Restore Terraform plugin cache"
        uses: actions/cache@v2
        with:
          path: ${{ env.TF_PLUGIN_CACHE_DIR }}
          key: terraform-providers-${{ hashFiles('.terraform.lock.hcl') }}
          restore-keys: |
            terraform-providers-

      - name: "Terraform init"
        run: terraform init --input=false
        env:
          # https://support.hashicorp.com/hc/en-us/articles/360043550953
          TF_WORKSPACE: ${{ needs.tf-workspace.outputs.workspace-name }}

      - name: "Activate workspace"
        run: terraform workspace select ${{ needs.tf-workspace.outputs.workspace-name }}

      - name: "Terraform plan"
        id: plan
        # https://github.com/hashicorp/terraform/issues/29130
        continue-on-error: true
        run: terraform plan --input=false --out=tfplan --detailed-exitcode
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_PLAN_SA_KEY_JSON }}
          TF_VAR_deployment_name: ${{ inputs.release_name }}

      - name: "Check for changes in Terraform plan"
        id: plan-has-changes
        shell: python
        run: |
          import sys

          exit_code = ${{ steps.plan.outputs.exitcode }}
          print(f"Exit code = {exit_code}")

          if exit_code == 0:
              plan_has_changes = "false"
          elif exit_code == 2:
              plan_has_changes = "true"
          else:
              sys.exit(exit_code)

          print(f"Plan has changes: {plan_has_changes}")
          print(f"::set-output name=plan-has-changes::{plan_has_changes}")

      - name: "Upload tfplan for use in deploy job"
        uses: actions/upload-artifact@v2
        with:
          name: tfplan
          path: tfplan

  deploy:
    name: "Deploy"
    environment: tf-${{ inputs.release_type }}
    runs-on: ubuntu-latest
    needs: [ tf-workspace, tf-plan ]
    if: ${{ needs.tf-plan.outputs.plan-has-changes == 'true' }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Set up Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_TEAM_TOKEN }}

      - name: "Restore Terraform plugin cache"
        uses: actions/cache@v2
        with:
          path: ${{ env.TF_PLUGIN_CACHE_DIR }}
          key: terraform-providers-${{ hashFiles('.terraform.lock.hcl') }}
          restore-keys: |
            terraform-providers-

      - name: "Terraform init"
        run: terraform init --input=false
        env:
          # https://support.hashicorp.com/hc/en-us/articles/360043550953
          TF_WORKSPACE: ${{ needs.tf-workspace.outputs.workspace-name }}

      - name: "Activate workspace"
        run: terraform workspace select ${{ needs.tf-workspace.outputs.workspace-name }}

      - name: "Download tfplan from plan job"
        uses: actions/download-artifact@v2
        with:
          name: tfplan

      - name: "Terraform apply"
        run: terraform apply --input=false tfplan
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_DEPLOY_SA_KEY_JSON }}
